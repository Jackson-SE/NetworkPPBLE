% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/UI_predict.R
\name{UI_predict}
\alias{UI_predict}
\title{PPBLE predict with Uncertain Inputs}
\usage{
UI_predict(object, EX, VarX, UICF, batch_size = 100)
}
\arguments{
\item{object}{an object of class \code{emulate}}

\item{EX}{vector or matrix of expected values.}

\item{VarX}{vector or matrix of variances.}

\item{UICF}{an Uncertain Inputs correlation function to be used.  It is assumed that this is an extension of \code{CF} used by \code{\link[NetworkPPBLE]{emulate}} when the emulator was built.  As such, it assumes that any additional parameters are the same. It also assumes that the first four objects of this correlation function are the expectations followed by the variances of the two matrices of points at which to run the correlation function.}

\item{batch_size}{the size of the batches at which to perform the predictions, default is 100.}
}
\value{
\item{EfX}{BL adjusted expectation for f(X)}
\item{VarfX}{BL adjusted variance for f(X)}
}
\description{
predict the value of a model at some new input locations, along with a measure of uncertainty, using a PPBLE of class \code{emulate}.  We assume that the points at which we wish to predict are uncertain, given by an expected value and a variance (Bayes linear).  Having said this, we assume that the emulaor training points were fixed and known, hence we can use a regular object of class \code{emulate}.
}
\examples{
f <- function( x ){ c( x[2] * sin( x[1] ) + x[1] * cos( x[2] ), 2 * x[1] + 3 * x[2] / x[1] ) }
x <- matrix( runif( 20, 0.2, 1.2 ), ncol = 2 )
fx <- t( apply( x, 1, f ) )
theta <- c( 0.4, 0.6 )
emulator <- emulate( x = x, fx = fx, CF = GaussianCF,
                  CF_para = list( theta = theta, delta = 0.0001 ) )
E_Y <- matrix( runif( 16, 0.2, 1.2), ncol = 2 )
Var_Y <- matrix( rep( 0.01, 16 ), ncol = 2 )
UI_predict( emulator, E_Y, Var_Y, UICF = GaussianCFUI )
}
